I"^<p>DeadLine을 하면서 Express를 썻었는데 그냥 무작정 써보기만하고 정리를 안했었다.</p>

<p>그래서 Express로 RestAPI를 구현하면서 배운 내용을 정리하기로 해보았다.</p>

<h1 id="expressjs란">ExpressJS란</h1>

<p>Express가 nodejs를  가장 많이 사용하고 있는 웹 프레임 워크이다.</p>

<p>또한 MVC 형태의 구조를 제공하여, BACKEND로  REST API, SOCKET.IO와 같은 웹앱 기능을 제공한다.</p>

<h1 id="expressjs의-작동-방식"><strong>Express.js의 작동 방식</strong></h1>

<p>보통 Express.js에는 메인 파일이라고 하는 진입점이 있다. 메인 파일에서는 다음과 같은 단계를 밟는다.</p>

<ol>
  <li>controller, utils, help, model과 같은 자체적인 모듈을 비롯한 서드파티 의존 모듈을 인클루드한다.</li>
  <li>템플릿 엔진과 해당 템플릿 엔진의 파일 확장자와 같은 Express.js 앱 설정을 구성한다.</li>
  <li>오류 핸들러, 정적 파일 폴더, 쿠키 및 기타 파서와 같은 미들웨어를 정의한다.</li>
  <li>라우팅을 정의한다.</li>
  <li>MongoDB, Redis 또는 MySQL과 같은 데이터베이스에 연결한다.</li>
  <li>앱을 구동한다.</li>
</ol>

<h1 id="기본-라우팅">기본 라우팅</h1>

<p>라우팅은 URL 및 HTTP 요청 메소드인 특정 엔드포인트에 대한 클라이언트 요청에 응답하는 방법을 말한다.</p>

<p>라우터마다 하나이상의 핸들러 함수를 가질 수 있다.</p>

<p>라우터는 다음과 같은 구조이다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="nx">METHOD</span><span class="p">(</span><span class="nx">PATH</span><span class="p">,</span> <span class="nx">HANDLER</span><span class="p">)</span>
</code></pre></div></div>

<p>라우터는 기본적으로 CRUD를 제공한다. 아래는 CRUD 구현한 예이다.</p>

<h3 id="get">GET</h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="s1">'/'</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span><span class="o">=&gt;</span> <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">'get/ Hello!'</span><span class="p">))</span>
</code></pre></div></div>

<h3 id="post">POST</h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">'/'</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span><span class="o">=&gt;</span> <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">'PSOT 요청을 받았습니다.'</span><span class="p">))</span>
</code></pre></div></div>

<h3 id="put">PUT</h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="s1">'/user'</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span><span class="o">=&gt;</span> <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">'/user에서 PUT요청을 받았습니다.'</span><span class="p">))</span>
</code></pre></div></div>

<h3 id="delete">DELETE</h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="s1">'/user'</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span><span class="o">=&gt;</span> <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">'/user에서 DELETE요청을 받았습니다.'</span><span class="p">))</span>
</code></pre></div></div>

<h1 id="미들웨어">미들웨어</h1>

<p>애플리케이션 요청-응답(req-res)주기 중 그 다음의 미들웨어 함수에 대한 엑세스 권한을 갖는 함수이다.</p>

<p>미들웨어 함수는 next라는 변수로 표시된다</p>

<p>즉, HTTP BODY에 request, response가 존재하는데, 클라이언트가 request를 받고 response를 생성해서 보내주는 과정의 중간에 개발자가 간섭하여 로직생성, req, res 변경 및 흐름제어를 할 수 있다.</p>

<h3 id="appuse">app.use()</h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">auth</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"/auth"</span><span class="p">)</span> <span class="c1">// #1</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s2">"/auth"</span><span class="p">,</span> <span class="nx">auth</span><span class="p">)</span> <span class="c1">// #2</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">cookieParser</span><span class="p">()))</span> <span class="c1">// #3</span>
</code></pre></div></div>
<p>애플리케이션 단계에서 URL을 분리하고</p>

<h3 id="expressrouter">express.router()</h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">router</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="s1">'/'</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span><span class="o">=&gt;</span> <span class="p">{</span>
	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">req</span><span class="p">);</span>
	<span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">'respond with a resource'</span><span class="p">);</span>
	<span class="nx">next</span><span class="p">());</span>
<span class="p">}</span>
</code></pre></div></div>
<p>라우터 단계에서 URL제어를 한다</p>
:ET